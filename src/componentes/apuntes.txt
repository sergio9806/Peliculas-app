{/* contenedor del banner y reproductor de video  */}
       <div>
        <main>
          {movie ? (
            <div
              className="viewtrailer"
              style={{
                backgroundImage: `url("${IMAGE_PATH}${movie.backdrop_path}")`,
              }}
            >
              {playing ? (
                <>
                  <YouTube
                    videoId={trailer.key}
                    className="reproductor container"
                    containerClassName={"youtube-container amru"}
                    opts={{
                      width: "100%",
                      height: "100%",
                      playerVars: {
                        autoplay: 1,
                        controls: 0,
                        cc_load_policy: 0,
                        fs: 0,
                        iv_load_policy: 0,
                        modestbranding: 0,
                        rel: 0,
                        showinfo: 0,
                      },
                    }}
                  />
                  <button onClick={() => setPlaying(false)} className="boton">
                    Close
                  </button>
                </>
              ) : (
                <div className="container">
                  <div className="">
                    {trailer ? (
                      <button
                        className="boton"
                        onClick={() => setPlaying(true)}
                        type="button"
                      >
                        Play Trailer
                      </button>
                    ) : (
                      "Sorry, no trailer available"
                    )}
                    <h1 className="text-white">{movie.title}</h1>
                    <p className="text-white">{movie.overview}</p>
                  </div>
                </div>
              )}
            </div>
          ) : null}
        </main>
      </div>
      import YouTube from 'react-youtube';


      <div className="Navbar2__container">
      <nav className="navbar__nav">
        <ul className="navbar__ul">

          <li className="item__nav2">
            <Link className="Nvitem" to='/'>MovieWorld</Link>
          </li>


          <li className="item__nav2">
            <Link className="Nvitem" to='/Inicio'>Inicio</Link>
          </li>


          <li className="item__nav2">
            <Link className="Nvitem" to='/Login'>Login</Link>
          </li>
          <span></span>


        </ul>
      </nav>
    </div>
    
    //capturar inputs
    <div className='calificacion'>
                                <h3>Califica la película</h3>
                                <select name='calificacion' className='select__calificacion' onChange={capturarInputs} value={userVista.calificacion}>
                                  <option>Mala</option>
                                  <option>Regular</option>
                                  <option>Buena</option>
                                  <option>Muy buena</option>
                                  <option>Excelente</option>
                                </select>
                              </div>
                              <input name='comentario_personal' className='comentario_personal' placeholder='Añade un comentario sobre la pelicula' onChange={capturarInputs} value={userVista.comentario_personal}></input>


  const guardarDatosVistas = async (e, datosPelicula, props) => {
    e.preventDefault();
    try {
      if (subId === '') {
        await addDoc(collection(db, 'vistas'), { ...datosPelicula });
      } else {
        await setDoc(doc(db, 'vistas', subId), { ...datosPelicula });
      }
      setUser({ Nombre: '', Idpelicula: '', correo: '', urlima: '', descrip_movie: '', comentario_personal: '', calificacion: '' });
      setsubId('');
      Windowstatevista(false);
    }
    catch (error) {
      console.log(error);
    }
  }


//capturar inputs 
  const capturarInputs = (e) => {
    const { name, value } = e.target;
    setUserVista({ ...user, [name]: value })
  }
 animacion principal
 <div>
        <img src={Portada} alt="" className='tamaño__imagen' height={800} />
        <div className="bodyp">
          <div className="square"><img src={Uno} alt="" className='tamaño__imagen' /></div>
           <div className="square"><img src={Uno} alt="" className='tamaño__imagen' /></div>
          <div className="square"><img src={Uno} alt="" className='tamaño__imagen' /></div>
          <div className="square"><img src={Uno} alt="" className='tamaño__imagen' /></div>
          

          <div className="circle"><img src={Tres} alt="" className='tamaño__imagen' /></div>
           <div className="circle"><img src={Tres} alt="" className='tamaño__imagen' /></div>
          <div className="circle"><img src={Tres} alt="" className='tamaño__imagen' /></div>
          <div className="circle"><img src={Tres} alt="" className='tamaño__imagen' /></div>
           

          <div className="triangle"><img src={Dos} alt="" className='tamaño__imagen' /></div>
           <div className="triangle"><img src={Dos} alt="" className='tamaño__imagen' /></div>
          <div className="triangle"><img src={Dos} alt="" className='tamaño__imagen' /></div>
          <div className="triangle"><img src={Dos} alt="" className='tamaño__imagen' /></div>
           
        </div>
      </div>

      //animacion 

  useEffect(() => {
    function randomValues() {
      anime({
        targets: ".square, .circle, .triangle",
        translateX: function () {
          return anime.random(-500, 500);
        },
        translateY: function () {
          return anime.random(-300, 300);
        },
        rotate: function () {
          return anime.random(0,40);
        },
        scale: function () {
          return anime.random(0.2, 2);
        },
        duration: 5000,
        easing: "easeInOutQuad",
        complete: randomValues
      });
    }

    randomValues();


    return () => {
      anime.remove(".square, .circle, .triangle");
    };
  }, []);
  



<div className='details'>
                      <h1>{list.Nombre}</h1>
                      <section className='btnmovie'>
                        <button className='movie__vista' onClick={() => Windowstatevista(true)} >Película vista</button>
                      </section>
                      <button className='btn__deleteMovie' onClick={() => deleteUser(list.id)}>
                        Eliminar película
                      </button>
                      <Modal2
                        estadovista={Window1vista}
                        cambiarEstadovista={Windowstatevista}
                        capturardatosVistas={capturardatosVistas}
                        datosPelicula={list}
                      >
                        <Opcionesfav>
                          <Opciones2fav>
                            <form onSubmit={(e) => guardarDatosVistas(e, list)}>
                              <h1 name='Nombre_vista' >{list.Nombre}</h1>
                              <p name='Idpelicula_vista' className='id-pelicula2'>{list.Idpelicula}</p>
                              <p name='correo_vista' className='correo-info2'>{list.correo}</p>
                              <p name='urlima_vista' className='urlFavImagen2'>${list.urlima}</p>
                              <p name='descrip_movie_vista' className='descrip_moviebd2'>{list.overview}</p>
                              <h2>¿Deseas agregar esta película a peliculas vistas?</h2>
                              <button onClick={(e) => guardarDatosVistas(e, list, deleteUser(list.id))}>Agregar</button>


                            </form>

                          </Opciones2fav>
                          <Opciones3fav>
                            <div key={movie.id}>

                              <img src={`${list.urlima}`} alt="" width={110} height={150} />
                            </div>
                          </Opciones3fav>
                        </Opcionesfav>

                      </Modal2>

                    </div>





                      // Utilizar useMemo para memoizar la función getLista
  const memoizedGetLista = useMemo(() => getLista, [db]);
  const memoizedGetListavista = useMemo(() => getListavista, [db]);
  const memoizedGetListaCali = useMemo(() => getListaCali, [db]);
  // Llamar a memoizedGetLista en useEffect para cargar la lista
  useEffect(() => {
    memoizedGetLista();
  }, [memoizedGetLista]);

  // Llamar a memoizedGetListavista en useEffect para cargar la lista de vistas
  useEffect(() => {
    memoizedGetListavista();
  }, [memoizedGetListavista]);

  // Llamar a memoizedGetListaCali en useEffect para cargar la lista de calificaciones
  useEffect(() => {
    memoizedGetListaCali();
  }, [memoizedGetListaCali]);



  @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap');

.Navbar__containerhome {
  width: 100%;
  box-sizing: border-box;
  font-family: 'Poppins', sans-serif;
  justify-content: space-between;
  align-items: center;
  display: flex;
}

.navbar__nav {
  display: flex;
  justify-content: left;
  align-items: center;
  min-height: 20vh;
  background-color: #191919;
  width: 100%;
  padding: 0px 25px;
}

.titulo__Pagina {
  font-size: 4rem;
  color: #f4cc70;
  font-weight: bold;
  text-decoration: none;
}

.navbar {
  display: flex;
  text-decoration: none;
  position: relative;
  border-radius: 8px;
  background-color: #222;
  width: 100%;
  justify-content: space-evenly;
}

.navbar__ul {
  display: flex;
  margin-top: 10px;
}

.item__nav {
  list-style: none;
  box-shadow: inset 0 0 0 0 #f4cc70;
  margin: 0 -.25rem;
  padding: 0 .25rem;
  transition: color .3s ease-in-out, box-shadow .3s ease-in-out;
}

.prueba {
  text-decoration: none;

}

.Nvitem {
  color: aliceblue;
  font-size: 2rem;
  text-decoration: none;
  padding: 0px 30px;
}

.Nvitem:hover {
  border-color: #f4cc70;
}

nav .item__nav:nth-child(1):hover {
  box-shadow: inset 235px 0 0 0 #f4cc70;
  color: #191919;
}

nav .item__nav:nth-child(2):hover {

  color: #191919;
  box-shadow: inset 220px 0 0 0 #f4cc70;
}

nav .item__nav:nth-child(3):hover {
  color: #191919;
  box-shadow: inset 140px 0 0 0 #f4cc70;
}

.boton__SignOut {
  border: 0;
  background-image: linear-gradient(150deg,
      rgb(30, 105, 105), #3aeaf0);
  border-radius: 8px;
  color: #fff;
  font-size: 18px;
  padding: 4px;
  cursor: pointer;
  transition: .3s;
  font-weight: bold;
  height: 45px;
  width: 180px;
  color: #f4cc70;
}

.boton__SignOut span {
  transition: .3s;
}

.boton__SignOut:hover span {
  background: none;
  color: #fff;
}

.boton__SignOut:active {
  transform: scale(0.9);
}

@media(max-width: 848px) {
  .navbar__nav {
    flex-direction: column;
    align-items: center;
    padding: 2% 0;
  }

  .titulo__Pagina {
    font-size: 3rem;
  }

  .navbar__ul {
    display: flex;
    align-items: center;
    flex-direction: column;
    text-decoration: none;
    position: relative;
    border-radius: 8px;
    background-color: #222;
    padding: 0 0 30px;
  }

  .navbar__ul span {
    position: absolute;
    left: 5%;
    width: 83%;
    top: 27%;
    height: 4%;
    background: linear-gradient(60deg, #2e3192, #f4cc70);
    border-radius: 8px;
    transition: .5s ease;
  }

  nav .item__nav:nth-child(2):hover~span {
    left: 32%;
    width: 35%;
    top: 50%;
    height: 4%;
  }

  nav .item__nav:nth-child(3):hover~span {
    left: 36%;
    width: 28%;
    top: 68%;
    height: 4%;
  }

  nav .item__nav:nth-child(4):hover~span {
    left: 40%;
    width: 20%;
    top: 85%;
    height: 4%;
  }

  .Nvitem,
  .Nvitem__boton {

    font-size: 1.5rem;
    padding: 20px;
    flex-direction: column;
  }

  .Nvitem__boton {
    margin-right: 20%;
  }


}